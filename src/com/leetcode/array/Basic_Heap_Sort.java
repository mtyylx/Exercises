package com.leetcode.array;

/**
 * Created by LYuan on 2016/9/27.
 *
 * Basic Algorithm: Heap Sort
 *
 */
public class Basic_Heap_Sort {
    public static void main(String[] args) {

    }

    // 看到Heap Sort我完全想不起来到底跟Heap有什么关系，据说Heap Sort是改进版的Selection Sort
    // 在复习算法的时候我发现一个特别有意思的现象，就是之前学会了这个算法之后，往往已经忘记了最初接触时候的那些最根本的疑问，
    // 比如在Heap Sort代码的注释里可以看到我当时事无巨细的分析了很多细枝末节的问题，却并没有强调这个算法最独特的地方就是他用了Heap，heap到底是什么等等
    // 结果就是，我现在再看之前写的算法注释的时候，发现完全get不到上面写的点，因为我压根就不记得到底Heap是个什么东西了，
    // 以为就是一个类似于Queue的东西，和Java内存的Heap和Stack搞混了。这也说明其实我之前学的时候就没有真正的领悟到最核心的东西。
    // 好，啰嗦完毕，到底Heap是什么？Heap Sort又是什么呢？
    // 如果我们说一个数据结构是Heap，那么是因为这个数据结构符合“最大堆或最小堆性质”。
    // 这个性质是这样的：如果将该数据结构转化为二叉树，那么一定有父节点全大于或全小于他们的子节点。
    // 所以可以判定{1, 2, 3, 4, 5, 6, 7}是Heap，而且是最小堆。
    // 所以可以判定{2, 1, 3, 4, 5, 6, 7}不是Heap，因为父节点8的两个子节点9和7并不同时大于或小于父节点。
    // 同时可以看到，如果一个数据结构是Heap，那么他基本上就已经差不多有序了，因为Heap的性质已经确保了层与层之间一定是有序的，
    // 例如{1, 2, 3, 7, 5, 4, 6}，可以看到第一层{1}、第二层{2, 3}、第三层{7, 5, 4, 6}的层与层之间已经有序了，不需要再交换任何元素了。
    // 需要排序的只是每层内部，只要确保每层内部都按照一种顺序排序，就可以保证整个数据结构都是有序的了。
    // 上面介绍的就是到底什么是Heap，下面我们做的其实就是利用Heap的这些性质来为排序服务。
    // 首先我们要把任何一个数组转变成为一个Max Heap，
    // 然后我们再依次对Heap的每一层进行传统的排序，就搞定了。
    static void HeapSort(int[] a) {

    }
}
